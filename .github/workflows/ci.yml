name: AI Code Review
on:
  pull_request:
    types: [opened, synchronize, reopened]

# Add permissions block here
permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to get the diff

      - name: Get diff
        id: get_diff
        run: |
          git diff --unified=0 ${{ github.event.before }} ${{ github.sha }} > diff.txt
          echo "diff_file=diff.txt" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install @anthropic-ai/sdk

      - name: Run Claude review
        id: claude_review
        uses: actions/github-script@v7
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        with:
          script: |
            try {
              const { Anthropic } = require('@anthropic-ai/sdk');
              const fs = require('fs');

            const client = new Anthropic({
                apiKey: process.env.ANTHROPIC_API_KEY,
            });

            const diff =  fs.readFileSync(process.env.GITHUB_WORKSPACE + '/diff.txt', 'utf8');
            console.log(diff);


            const guidelines = `
            You are a code reviewer providing feedback on a pull request. 
            Follow these guidelines:

            -   **Overall Code Quality**:
                -   Is the code clean, well-structured, and easy to understand?
                -   Does it follow the principles of SOLID?
                -   Are there any unnecessary comments or complexity?
            -   **Functionality**:
                -   Does the code achieve the intended purpose?
                -   Are there any edge cases that are not handled?
                -   Are there any potential bugs or errors?
            -   **Security**:
                -   Are there any security vulnerabilities (e.g., injection attacks, data leaks)?
                -   Is sensitive data handled properly?
            -   **Performance**:
                -   Is the code performant and efficient?
                -   Are there any potential performance bottlenecks?
            -   **Style**:
                -   Does the code adhere to the project's coding style guidelines? (Check for naming conventions, indentation, etc.)
                -   Is the code consistent with the rest of the codebase?
            -   **Documentation**:
                -   Is the code well-documented?
                -   Are there comments for complex or non-obvious logic?
                -   Is the documentation up-to-date?
            -   **Testing**:
                -   Are there sufficient tests for the changes?
                -   Do the tests cover all the relevant cases?
                -   Have the tests passed?

            For each issue, provide a clear and concise comment. Include the file name, line number(s), and a suggestion for how to fix it. If the code is good, you don't need to say anything. Focus on what needs to be improved.

            You must respond with a valid JSON array of comment objects. Each comment object should have the following structure:
            {
              "file": "path/to/file.ext",
              "startLine": 42,
              "endLine": 45,
              "comment": "Your detailed comment here"
            }

            If there are no issues to comment on, return an empty array: []
            `;

            const prompt = `${guidelines}

            Here is the diff of the code changes:
            \`\`\`diff
            ${diff}
            \`\`\`

            Provide your feedback as a JSON array of comment objects as specified in the guidelines.
            `;

            const response = await client.messages.create({
                model: "claude-3-7-sonnet-20250219",
                max_tokens: 4096,
                messages: [
                    { role: "user", content: prompt },
                ],
            });

              const reviewText = response.content[0].text;
              console.log(reviewText);
              
              // Extract JSON from the response
              let reviewJson = [{
                "file": "index.js",
                "startLine": 1,
                "endLine": 1,
                "comment": "This is a 'test' comment"
              }];
              try {
                // Look for JSON array in the response
                const jsonMatch = reviewText.match(/\[\s*\{.*\}\s*\]/s);
                if (jsonMatch) {
                  reviewJson = JSON.parse(jsonMatch[0]);
                } else {
                  console.log("No valid JSON found in response");
                }
              } catch (error) {
                console.error("Error parsing JSON response:", error);
                console.log("Raw response:", reviewText);
              }
              
              core.setOutput('review', JSON.stringify(reviewJson));
              console.log("Review comments:", JSON.stringify(reviewJson, null, 2));
            } catch (error) {
              core.setFailed(`Claude review failed: ${error.message}`);
            }

      - name: Post review comments
        uses: actions/github-script@v7
        if: ${{ steps.claude_review.outputs.review != '' }}
        env:
          REVIEW_JSON: ${{ steps.claude_review.outputs.review }}
        with:
          script: |
            try {
              const reviewJson = JSON.parse(process.env.REVIEW_JSON);
              
              if (!Array.isArray(reviewJson)) {
                console.error("Expected review to be an array, got:", typeof reviewJson);
                return;
              }
              
              console.log(`Processing ${reviewJson.length} review comments`);
              
              for (const comment of reviewJson) {
                if (!comment.file || !comment.startLine || !comment.comment) {
                  console.warn("Skipping invalid comment:", comment);
                  continue;
                }
                
                const file = comment.file;
                const line = parseInt(comment.startLine, 10);
                
                if (isNaN(line)) {
                  console.warn(`Skipping comment with invalid line number:`, comment);
                  continue;
                }
                
                console.log(`Creating comment for ${file}:${line}`);
                
                await github.rest.pulls.createReviewComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  body: comment.comment,
                  commit_id: github.event.pull_request.head.sha,
                  path: file,
                  line: line,
                  side: 'RIGHT'
                });
              }
            } catch (error) {
              core.setFailed(`Failed to post review comments: ${error.message}`);
            }
